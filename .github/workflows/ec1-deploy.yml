name: Deploy Eureka and API Gateway

on:
  push:
    branches: [ main ]
    paths:
      - 'eureka-server/**'
      - 'api-gateway/**'
      - '.github/workflows/ec1-deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Repository 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      # application.yml 파일 동적 생성
      - name: Eureka 서버 설정 파일 생성
        run: |
          mkdir -p eureka-server/src/main/resources
          echo "${{ secrets.EUREKA_SERVER_CONFIG }}" > eureka-server/src/main/resources/application.yml
          echo "Eureka 서버 설정 파일 생성 완료"

      - name: API Gateway 설정 파일 생성
        run: |
          mkdir -p api-gateway/src/main/resources
          echo "${{ secrets.API_GATEWAY_CONFIG }}" > api-gateway/src/main/resources/application.yml
          echo "API Gateway 설정 파일 생성 완료"

      # 서비스 빌드
      - name: Eureka 서버 빌드
        run: |
          cd eureka-server
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: API Gateway 빌드
        run: |
          cd api-gateway
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # Dockerfile 생성 또는 이미 있는지 확인
      - name: Dockerfile 확인 및 생성
        run: |
          # Eureka 서버 Dockerfile 생성 (없는 경우)
          if [ ! -f eureka-server/Dockerfile ]; then
            echo "FROM openjdk:17-jdk-alpine" > eureka-server/Dockerfile
            echo "WORKDIR /app" >> eureka-server/Dockerfile
            echo "COPY build/libs/*.jar app.jar" >> eureka-server/Dockerfile
            echo "EXPOSE 8761" >> eureka-server/Dockerfile
            echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> eureka-server/Dockerfile
          fi
          
          # API Gateway Dockerfile 생성 (없는 경우)
          if [ ! -f api-gateway/Dockerfile ]; then
            echo "FROM openjdk:17-jdk-alpine" > api-gateway/Dockerfile
            echo "WORKDIR /app" >> api-gateway/Dockerfile
            echo "COPY build/libs/*.jar app.jar" >> api-gateway/Dockerfile
            echo "EXPOSE 8080" >> api-gateway/Dockerfile
            echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> api-gateway/Dockerfile
          fi
          
          # docker-compose.yml 생성 (없는 경우)
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOL'
            version: '3.7'
            services:
              eureka-server:
                build: ./eureka-server
                container_name: eureka-server
                ports:
                  - "8761:8761"
                restart: always
                networks:
                  - msa-network
          
              api-gateway:
                build: ./api-gateway
                container_name: api-gateway
                ports:
                  - "8080:8080"
                depends_on:
                  - eureka-server
                environment:
                  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                restart: always
                networks:
                  - msa-network
          
            networks:
              msa-network:
                driver: bridge
            EOL
          fi

      # EC2로 파일 업로드
      - name: EC2에 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "eureka-server/build/libs/*.jar,api-gateway/build/libs/*.jar,eureka-server/Dockerfile,api-gateway/Dockerfile,docker-compose.yml"
          target: "/home/${{ secrets.EC2_USER }}/app"
          strip_components: 0

      # EC2에서 서비스 실행
      - name: EC2에서 서비스 실행
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            # Docker 및 Docker Compose 설치 확인
            if ! command -v docker &> /dev/null; then
              echo "Docker 설치 중..."
              sudo yum update -y
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker $USER
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose 설치 중..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # 서비스 배포 및 실행
            cd /home/$USER/app
            
            # 이전 서비스 중지 및 새 서비스 시작
            docker-compose down
            docker-compose up -d --build
            
            # 로그 확인
            sleep 5
            docker ps
            docker logs eureka-server
            docker logs api-gateway